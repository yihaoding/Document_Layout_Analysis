# -*- coding: utf-8 -*-
"""tools.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IQql5nxEpz1BputelZcXnNPEpBkXXV4E
"""

# import key libraries
import math
import torch
import nltk
nltk.download('punkt')

# change scalar to high dimensional vectors
def positionalencoding1d(d_model, length):
    """
    :param d_model: dimension of the model
    :param length: length of positions
    :return: length*d_model position matrix
    """
    if d_model % 2 != 0:
        raise ValueError("Cannot use sin/cos positional encoding with "
                         "odd dim (got dim={:d})".format(d_model))
    pe = torch.zeros(length, d_model)
    position = torch.arange(0, length).unsqueeze(1)
    div_term = torch.exp((torch.arange(0, d_model, 2, dtype=torch.float) *
                         -(math.log(10000.0) / d_model)))
    pe[:, 0::2] = torch.sin(position.float() * div_term)
    pe[:, 1::2] = torch.cos(position.float() * div_term)

    return pe


def positionalencoding2d(d_model, height, width):
    """
    :param d_model: dimension of the model
    :param height: height of the positions
    :param width: width of the positions
    :return: d_model*height*width position matrix
    """
    if d_model % 4 != 0:
        raise ValueError("Cannot use sin/cos positional encoding with "
                         "odd dimension (got dim={:d})".format(d_model))
    pe = torch.zeros(d_model, height, width)
    # Each dimension use half of d_model
    d_model = int(d_model / 2)
    div_term = torch.exp(torch.arange(0., d_model, 2) *
                         -(math.log(10000.0) / d_model))
    pos_w = torch.arange(0., width).unsqueeze(1)
    pos_h = torch.arange(0., height).unsqueeze(1)
    pe[0:d_model:2, :, :] = torch.sin(pos_w * div_term).transpose(0, 1).unsqueeze(1).repeat(1, height, 1)
    pe[1:d_model:2, :, :] = torch.cos(pos_w * div_term).transpose(0, 1).unsqueeze(1).repeat(1, height, 1)
    pe[d_model::2, :, :] = torch.sin(pos_h * div_term).transpose(0, 1).unsqueeze(2).repeat(1, 1, width)
    pe[d_model + 1::2, :, :] = torch.cos(pos_h * div_term).transpose(0, 1).unsqueeze(2).repeat(1, 1, width)

    return pe
def positionalencoding4d(d_model, feat_list1, feat_list2, feat_list3, feat_list4):
    if d_model % 8 != 0:
        raise ValueError("Cannot use sin/cos positional encoding with "
                         "odd dimension (got dim={:d})".format(d_model))
    d_model = int(d_model/4)
    pe1 = torch.zeros(len(feat_list1), d_model)
    feats1 = torch.tensor(feat_list1).unsqueeze(1)
    div_term = torch.exp((torch.arange(0, d_model, 2, dtype=torch.float) *
                         -(math.log(10000.0) / d_model)))
    pe1[:, 0::2] = torch.sin(feats1.float() * div_term)
    pe1[:, 1::2] = torch.cos(feats1.float() * div_term)

    pe2 = torch.zeros(len(feat_list2), d_model)
    feats2 = torch.tensor(feat_list2).unsqueeze(1)
    div_term = torch.exp((torch.arange(0, d_model, 2, dtype=torch.float) *
                         -(math.log(10000.0) / d_model)))
    pe2[:, 0::2] = torch.sin(feats2.float() * div_term)
    pe2[:, 1::2] = torch.cos(feats2.float() * div_term)

    pe3 = torch.zeros(len(feat_list3), d_model)
    feats3 = torch.tensor(feat_list3).unsqueeze(1)
    div_term = torch.exp((torch.arange(0, d_model, 2, dtype=torch.float) *
                         -(math.log(10000.0) / d_model)))
    pe3[:, 0::2] = torch.sin(feats3.float() * div_term)
    pe3[:, 1::2] = torch.cos(feats3.float() * div_term)

    pe4 = torch.zeros(len(feat_list4), d_model)
    feats4 = torch.tensor(feat_list4).unsqueeze(1)
    div_term = torch.exp((torch.arange(0, d_model, 2, dtype=torch.float) *
                         -(math.log(10000.0) / d_model)))
    pe4[:, 0::2] = torch.sin(feats4.float() * div_term)
    pe4[:, 1::2] = torch.cos(feats4.float() * div_term)
    pe = torch.cat((pe1,pe2,pe3,pe4),1)
    return pe

# functions related to calculating text density
# number of tokens / bounding box size
def token_density(obj):
  text = obj['text']
  x1,y1,x2,y2 = obj['box']
  tokenized_text = nltk.word_tokenize(text)
  size = abs(x2-x1)*abs(y2-y1)
  density = len(tokenized_text)/size
  obj['text_density'] = density
# number of tokens
def token_number(obj):
  text = obj['text']
  tokenized_text = nltk.word_tokenize(text)
  token_num = len(tokenized_text)
  obj['text_number'] = token_num
# number of characters
def char_number(obj):
  text = obj['text']
  char_num = len(text)
  obj['char_number'] = char_num
# number of characters / bounding box size
def char_density(obj):
  text = obj['text']
  x1,y1,x2,y2 = obj['box']
  size = abs(x2-x1)*abs(y2-y1)
  density = len(text)/size
  obj['char_density'] = density

# define a function to calculate bounding box manhattan distance
# Manhattan distance
def manhanttan_distance(bbox1, bbox2):
  x1, y1, x12, y12 = bbox1
  x2, y2, x22, y22 = bbox2
  w1 = abs(x12-x1)
  h1 = abs(y12-y1)
  w2 = abs(x22-x2)
  h2 = abs(y22-y2)
  dist = abs(x2-x1) + abs(y2-y1)
  if x2>x1 and abs(x2-x1)>w1:
    dist = dist-w1
  elif x2<x1 and abs(x2-x1)>w2:
    dist = dist-w2
  elif y1>y2 and abs(y1-y2)>h2:
    dist = dist-h2
  elif y2>y1 and abs(y1-y2)>h1:
    dist = dist-h1
  return dist

# directly return the gap distance bewteen bounding boxes
def gap_distance(bbox1, bbox2):
  x1, y1, x12, y12 = bbox1
  x2, y2, x22, y22 = bbox2
  w1 = abs(x12-x1)
  h1 = abs(y12-y1)
  w2 = abs(x22-x2)
  h2 = abs(y22-y2)
  if x2>x1 and abs(x2-x1)>w1:
    dist = abs(x2-x1)-w1
  elif x2<x1 and abs(x2-x1)>w2:
    dist = abs(x2-x1)-w2
  elif y1>y2 and abs(y1-y2)>h2:
    dist = abs(y2-y1)-h2
  elif y2>y1 and abs(y1-y2)>h1:
    dist = abs(y2-y1)-h1
  return dist